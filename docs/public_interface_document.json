{
  "package_name": "com.steve.calculator_app",
  "project_description": "This Flutter project is a calculator application that follows the Stacked architecture. It features routing, dependency injection, and the management of dialogs and bottom sheets. The application provides both a standard calculator and a scientific calculator functionality, allowing users to perform basic and more complex mathematical operations.",
  "architecture_overview": "The application adheres to the Stacked architecture, which separates the codebase into distinct layers: app setup, features, UI components, and utilities. It utilizes the Stacked package for state management, routing, and dependency injection. The architecture allows for easy addition of new features, services, bottom sheets, and dialogs through the use of various Stacked annotations.",
  "files": [
    {
      "name": "lib/app/app.dart",
      "description": "Defines the app structure using StackedApp annotation for routes, dependencies, bottom sheets, and dialogs. It includes routes (HomeView, StartupView), services (BottomSheetService, DialogService, NavigationService), bottom sheets (NoticeSheet), and dialogs (InfoAlertDialog). The file structure allows for easy addition of new services, routes, bottom sheets, and dialogs using the @stacked-import, @stacked-route, @stacked-service, @stacked-bottom-sheet, and @stacked-dialog annotations.",
      "class_diagram": "@startuml\nclass App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked_annotations.dart",
        "package:stacked_services/stacked_services.dart",
        "package:my_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "package:my_app/features/home/home_view.dart",
        "package:my_app/features/startup/startup_view.dart"
      ]
    },
    {
      "name": "lib/features/app/app_view.dart",
      "description": "Defines the root widget of the application. So this files can not be deleted at all.",
      "class_diagram": "@startuml\nclass AppView\nclass _App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/home/home_view.dart",
      "description": "The main home view of the application.",
      "class_diagram": "@startuml\nclass HomeView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:gap/gap.dart"
      ]
    },
    {
      "name": "lib/features/home/home_viewmodel.dart",
      "description": "ViewModel for the HomeView, manages the state and business logic.",
      "class_diagram": "@startuml\nclass HomeViewModel\n@enduml",
      "methods": [
        {
          "name": "incrementCounter",
          "description": "Increments the counter value",
          "parameters": [],
          "return_type": "void"
        },
        {
          "name": "showDialog",
          "description": "Shows a custom dialog",
          "parameters": [],
          "return_type": "void"
        },
        {
          "name": "showBottomSheet",
          "description": "Shows a custom bottom sheet",
          "parameters": [],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/startup/startup_view.dart",
      "description": "The startup view shown when the app is first launched.",
      "class_diagram": "@startuml\nclass StartupView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:gap/gap.dart"
      ]
    },
    {
      "name": "lib/features/startup/startup_viewmodel.dart",
      "description": "ViewModel for the StartupView, handles initialization logic.",
      "class_diagram": "@startuml\nclass StartupViewModel\n@enduml",
      "methods": [
        {
          "name": "runStartupLogic",
          "description": "Runs the startup logic and navigates to the home view",
          "parameters": [],
          "return_type": "Future"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/main.dart",
      "description": "The entry point of the application. Sets up the app and runs it.",
      "class_diagram": "@startuml\nclass main\n@enduml",
      "methods": [
        {
          "name": "main",
          "description": "The main function that runs the app",
          "parameters": [],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:flutter/services.dart",
        "package:my_app/app/app.bottomsheets.dart",
        "package:my_app/app/app.dialogs.dart",
        "package:my_app/app/app.locator.dart",
        "package:my_app/features/app/app_view.dart"
      ]
    },
    {
      "name": "lib/ui/common/app_colors.dart",
      "description": "This Dart file defines a set of constant color values that are used throughout the application's user interface. It provides a centralized and consistent way to manage the application's color palette, making it easier to maintain a cohesive visual design.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/app/app.locator.dart",
      "description": "This file is responsible for setting up and managing the dependency injection (DI) system used throughout the application. It is a generated code file that is part of the Stacked architecture, a popular Flutter state management and architecture pattern.",
      "class_diagram": "",
      "methods": [
        {
          "name": "setupLocator",
          "description": "This method is responsible for registering the various services and dependencies used in the application with the Stacked Locator. It allows the application to access these services and dependencies globally throughout the codebase.",
          "parameters": [
            "environment",
            "environmentFilter"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "stacked_services/src/bottom_sheet/bottom_sheet_service.dart",
        "stacked_services/src/dialog/dialog_service.dart",
        "stacked_services/src/navigation/navigation_service.dart",
        "stacked_shared/stacked_shared.dart"
      ]
    },
    {
      "name": "lib/app/app.dialogs.dart",
      "description": "This file is responsible for setting up and managing the dialog UI in the application. It is part of the Stacked architecture, which provides a way to easily integrate dialogs into the app.",
      "class_diagram": "",
      "methods": [
        {
          "name": "setupDialogUi",
          "description": "Registers custom dialog builders with the DialogService, allowing the app to display various types of dialogs.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "stacked_services",
        "app.locator",
        "../ui/dialogs/info_alert/info_alert_dialog"
      ]
    },
    {
      "name": "lib/app/app.bottomsheets.dart",
      "description": "This Dart file is responsible for setting up the bottom sheet UI for the application. It defines the available bottom sheet types and provides a setup function to register the custom bottom sheet builders with the BottomSheetService from the stacked_services package.",
      "class_diagram": "@startuml\nclass BottomSheetService {\n  +setCustomSheetBuilders(builders: Map<BottomSheetType, SheetBuilder>)\n}\n\nenum BottomSheetType {\n  notice\n}\n\nclass NoticeSheet {\n  +NoticeSheet({request, completer})\n}\n\nBottomSheetService <-- setupBottomSheetUi\nsetupBottomSheetUi --> BottomSheetType\nsetupBottomSheetUi --> NoticeSheet\n@enduml",
      "methods": [
        {
          "name": "setupBottomSheetUi",
          "description": "This function is responsible for setting up the custom bottom sheet builders for the application. It retrieves the BottomSheetService instance from the service locator and registers a map of BottomSheetType to SheetBuilder functions. This allows the application to display custom bottom sheets when the corresponding BottomSheetType is requested.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "stacked_services/stacked_services.dart",
        "app/app.locator.dart",
        "ui/bottom_sheets/notice/notice_sheet.dart"
      ]
    },
    {
      "name": "lib/app/app.router.dart",
      "description": "This file is responsible for managing the navigation and routing of the application. It defines the available routes, creates the necessary route definitions, and provides extension methods to simplify navigation throughout the app.",
      "class_diagram": "@startuml\nclass StackedRouter {\n  +List<RouteDef> get routes\n  +Map<Type, StackedRouteFactory> get pagesMap\n}\n\nclass Routes {\n  +static const homeView: String\n  +static const startupView: String\n  +static const all: Set<String>\n}\n\nExtension NavigatorStateExtension on NavigationService {\n  +Future<dynamic> navigateToHomeView()\n  +Future<dynamic> navigateToStartupView()\n  +Future<dynamic> replaceWithHomeView()\n  +Future<dynamic> replaceWithStartupView()\n}\n@enduml",
      "methods": [
        {
          "name": "StackedRouter",
          "description": "The main class that manages the application's navigation and routing. It defines the available routes and provides a mapping between route names and their corresponding page builders.",
          "parameters": null,
          "return_type": null
        },
        {
          "name": "navigateToHomeView",
          "description": "A navigation extension method that allows you to navigate to the HomeView route.",
          "parameters": [
            "int? routerId",
            "bool preventDuplicates = true",
            "Map<String, String>? parameters",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)? transition"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "navigateToStartupView",
          "description": "A navigation extension method that allows you to navigate to the StartupView route.",
          "parameters": [
            "int? routerId",
            "bool preventDuplicates = true",
            "Map<String, String>? parameters",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)? transition"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithHomeView",
          "description": "A navigation extension method that allows you to replace the current route with the HomeView route.",
          "parameters": [
            "int? routerId",
            "bool preventDuplicates = true",
            "Map<String, String>? parameters",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)? transition"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithStartupView",
          "description": "A navigation extension method that allows you to replace the current route with the StartupView route.",
          "parameters": [
            "int? routerId",
            "bool preventDuplicates = true",
            "Map<String, String>? parameters",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)? transition"
          ],
          "return_type": "Future<dynamic>"
        }
      ],
      "dependencies": [
        "calculator_app/features/home/home_view.dart",
        "calculator_app/features/startup/startup_view.dart",
        "flutter/material.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet_model.dart",
      "description": "The `NoticeSheetModel` class is responsible for managing the state and behavior of the notice sheet UI component in the application. It inherits from the `BaseViewModel` class provided by the `stacked` package, which is a popular view model library for Flutter.",
      "class_diagram": "@startuml\nclass NoticeSheetModel {\n}\n\nNoticeSheetModel --|> BaseViewModel\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/app/app_viewmodel.dart",
      "description": "The `AppViewModel` class in this file is responsible for managing the state and functionality of the application's core components. It serves as the central view model for the overall application, providing a common interface for accessing and manipulating the application's state and behavior.",
      "class_diagram": "@startuml\nclass AppViewModel {\n  +void someMethod()\n}\n@enduml",
      "methods": [
        {
          "name": "someMethod",
          "description": "This is a placeholder method that can be implemented to provide core functionality for the application.",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/scientific/widgets/scientific_button.dart",
      "description": "This Dart file defines a `ScientificButton` widget, which is a custom button component used in the scientific feature of the application. It provides a consistent and reusable way to display scientific-related buttons with a specific design and functionality.",
      "class_diagram": "@startuml\nclass ScientificButton {\n  -String label\n  -VoidCallback onPressed\n  -Color? color\n  +build(BuildContext): Widget\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the `ScientificButton` widget, which is a `MaterialButton` with the provided label, onPressed callback, and optional color.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/ui/common/ui_helpers.dart",
      "description": "This Dart file is responsible for providing a set of utility functions and constants that help with the layout and styling of the UI components in a Flutter application. It serves as a centralized location for managing common UI-related functionality, making it easier to maintain and apply consistent styling across the application.",
      "class_diagram": "@startuml\nclass UIHelpers {\n  + const horizontalSpaceTiny: Widget\n  + const horizontalSpaceSmall: Widget\n  + const horizontalSpaceMedium: Widget\n  + const horizontalSpaceLarge: Widget\n  + const verticalSpaceTiny: Widget\n  + const verticalSpaceSmall: Widget\n  + const verticalSpaceMedium: Widget\n  + const verticalSpaceLarge: Widget\n  + const verticalSpaceMassive: Widget\n  + const spacedDivider: Widget\n  + verticalSpace(double height): Widget\n  + screenWidth(BuildContext context): double\n  + screenHeight(BuildContext context): double\n  + screenHeightFraction(BuildContext context, {int dividedBy = 1, double offsetBy = 0, double max = 3000}): double\n  + screenWidthFraction(BuildContext context, {int dividedBy = 1, double offsetBy = 0, double max = 3000}): double\n  + halfScreenWidth(BuildContext context): double\n  + thirdScreenWidth(BuildContext context): double\n  + quarterScreenWidth(BuildContext context): double\n  + getResponsiveHorizontalSpaceMedium(BuildContext context): double\n  + getResponsiveSmallFontSize(BuildContext context): double\n  + getResponsiveMediumFontSize(BuildContext context): double\n  + getResponsiveLargeFontSize(BuildContext context): double\n  + getResponsiveExtraLargeFontSize(BuildContext context): double\n  + getResponsiveMassiveFontSize(BuildContext context): double\n  + getResponsiveFontSize(BuildContext context, {double? fontSize, double? max}): double\n}\n@enduml",
      "methods": [
        {
          "name": "verticalSpace",
          "description": "Creates a vertical spacer with the specified height.",
          "parameters": [
            "double height"
          ],
          "return_type": "Widget"
        },
        {
          "name": "screenWidth",
          "description": "Returns the width of the screen in the current context.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "screenHeight",
          "description": "Returns the height of the screen in the current context.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "screenHeightFraction",
          "description": "Returns a fraction of the screen height, based on the provided parameters.",
          "parameters": [
            "BuildContext context",
            "int dividedBy = 1",
            "double offsetBy = 0",
            "double max = 3000"
          ],
          "return_type": "double"
        },
        {
          "name": "screenWidthFraction",
          "description": "Returns a fraction of the screen width, based on the provided parameters.",
          "parameters": [
            "BuildContext context",
            "int dividedBy = 1",
            "double offsetBy = 0",
            "double max = 3000"
          ],
          "return_type": "double"
        },
        {
          "name": "halfScreenWidth",
          "description": "Returns half the width of the screen.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "thirdScreenWidth",
          "description": "Returns one-third of the width of the screen.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "quarterScreenWidth",
          "description": "Returns one-quarter of the width of the screen.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveHorizontalSpaceMedium",
          "description": "Returns a responsive horizontal space value based on the screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveSmallFontSize",
          "description": "Returns a responsive small font size based on the screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveMediumFontSize",
          "description": "Returns a responsive medium font size based on the screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveLargeFontSize",
          "description": "Returns a responsive large font size based on the screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveExtraLargeFontSize",
          "description": "Returns a responsive extra-large font size based on the screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveMassiveFontSize",
          "description": "Returns a responsive massive font size based on the screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveFontSize",
          "description": "Returns a responsive font size based on the screen width and the provided parameters.",
          "parameters": [
            "BuildContext context",
            "double? fontSize",
            "double? max"
          ],
          "return_type": "double"
        }
      ],
      "dependencies": [
        "dart:math",
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet.dart",
      "description": "The `NoticeSheet` class is responsible for displaying a bottom sheet with a notice message. It provides a simple and consistent way to present important information to the user, such as announcements, instructions, or alerts.",
      "class_diagram": "@startuml\nclass NoticeSheet {\n  -Function(SheetResponse)? completer\n  -SheetRequest request\n  +builder(BuildContext, NoticeSheetModel, Widget?): Widget\n  +viewModelBuilder(BuildContext): NoticeSheetModel\n}\n\nclass NoticeSheetModel {\n}\n\nNoticeSheet --> NoticeSheetModel\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI for the notice sheet, displaying the title and description provided in the `SheetRequest`.",
          "parameters": [
            "BuildContext",
            "NoticeSheetModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Creates an instance of the `NoticeSheetModel` class, which is used to handle the business logic and state management for the notice sheet.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "NoticeSheetModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart",
        "package:calculator_app/ui/bottom_sheets/notice/notice_sheet_model.dart",
        "package:calculator_app/ui/common/app_colors.dart",
        "package:calculator_app/ui/common/ui_helpers.dart"
      ]
    },
    {
      "name": "lib/features/calculator/widgets/calculator_display.dart",
      "description": "The CalculatorDisplay class is responsible for rendering the current calculation result in a calculator application. It provides a clean, visually-appealing display of the calculation output, ensuring a smooth and intuitive user experience.",
      "class_diagram": "@startuml\nclass CalculatorDisplay {\n  +String displayText\n  +Widget build(BuildContext context)\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the widget tree for the CalculatorDisplay, including the container and the text display.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog_model.dart",
      "description": "This Dart file defines the `InfoAlertDialogModel` class, which is responsible for managing the state and behavior of an information alert dialog within a Flutter application.",
      "class_diagram": "@startuml\nclass InfoAlertDialogModel {\n}\n\nInfoAlertDialogModel --|> BaseViewModel\n@enduml",
      "methods": [
        {
          "name": "InfoAlertDialogModel",
          "description": "The constructor for the `InfoAlertDialogModel` class.",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/calculator/calculator_service.dart",
      "description": "The CalculatorService class is responsible for managing the core functionality of a calculator application. It serves as the main interface between the user interface components and the underlying calculator logic.",
      "class_diagram": "@startuml\nclass CalculatorService {\n  +evaluate(String expression): String\n  +evaluateScientific(String expression): String\n}\n\nCalculatorService o-- CalculatorRepository\n@enduml",
      "methods": [
        {
          "name": "evaluate",
          "description": "Evaluates a basic arithmetic expression and returns the result as a string.",
          "parameters": [
            "expression"
          ],
          "return_type": "String"
        },
        {
          "name": "evaluateScientific",
          "description": "Evaluates a more complex scientific expression and returns the result as a string.",
          "parameters": [
            "expression"
          ],
          "return_type": "String"
        }
      ],
      "dependencies": [
        "calculator_app/app/app.locator.dart",
        "calculator_app/features/calculator/calculator_repository.dart"
      ]
    },
    {
      "name": "lib/features/scientific/widgets/scientific_display.dart",
      "description": "The ScientificDisplay class is responsible for rendering a text-based scientific display, typically used in scientific or technical applications. It provides a clean and visually appealing way to present numerical or scientific data to the user.",
      "class_diagram": "@startuml\nclass ScientificDisplay {\n  +String displayText\n  +build(BuildContext): Widget\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the widget tree for the ScientificDisplay, which includes a Container with padding and an aligned Text widget displaying the provided displayText.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/features/calculator/calculator_repository.dart",
      "description": "The CalculatorRepository class is responsible for evaluating mathematical expressions, both basic and scientific. It provides a core functionality for the calculator feature of the application, handling expression parsing and calculation to produce the final result.",
      "class_diagram": "@startuml\nclass CalculatorRepository {\n  +String evaluate(String expression)\n  +String evaluateScientific(String expression)\n}\n@enduml",
      "methods": [
        {
          "name": "evaluate",
          "description": "Evaluates a basic mathematical expression and returns the result as a string.",
          "parameters": [
            "expression"
          ],
          "return_type": "String"
        },
        {
          "name": "evaluateScientific",
          "description": "Evaluates a scientific mathematical expression and returns the result as a string.",
          "parameters": [
            "expression"
          ],
          "return_type": "String"
        }
      ],
      "dependencies": [
        "dart:core"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog.dart",
      "description": "The `InfoAlertDialog` class is responsible for displaying an informative alert dialog to the user. This dialog is typically used to provide important information or instructions to the user, often in response to a specific user action or system event.",
      "class_diagram": "@startuml\nclass InfoAlertDialog {\n  +InfoAlertDialog(request, completer)\n  +builder(context, viewModel, child): Widget\n  +viewModelBuilder(context): InfoAlertDialogModel\n}\n\nclass InfoAlertDialogModel {\n}\n\nInfoAlertDialog *-- InfoAlertDialogModel\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "The main build method that constructs the visual representation of the dialog. It includes a title, description, and a graphic element, as well as a 'Got it' button to dismiss the dialog.",
          "parameters": [
            "BuildContext context",
            "InfoAlertDialogModel viewModel",
            "Widget? child"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides an instance of the `InfoAlertDialogModel` class, which is used to manage the state and behavior of the dialog.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "InfoAlertDialogModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart",
        "package:calculator_app/ui/common/app_colors.dart",
        "package:calculator_app/ui/common/ui_helpers.dart",
        "package:calculator_app/ui/dialogs/info_alert/info_alert_dialog_model.dart"
      ]
    },
    {
      "name": "lib/features/calculator/widgets/calculator_button.dart",
      "description": "The `CalculatorButton` class is a custom Flutter widget responsible for rendering a button with a specified label, color, and callback function. It is a key component in the calculator feature of the application, providing a consistent and visually appealing user interface for the calculator's buttons.",
      "class_diagram": "@startuml\nclass CalculatorButton {\n  +String label\n  +VoidCallback onPressed\n  +Color? color\n  +build(BuildContext context): Widget\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the UI for the calculator button, which is a `MaterialButton` with the specified label, color, and callback function.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "flutter/material.dart"
      ]
    }
  ],
  "dependencies": [
    {
      "name": "flutter",
      "version": "sdk: flutter",
      "purpose": "Flutter framework"
    },
    {
      "name": "stacked",
      "version": "^3.4.0",
      "purpose": "Stacked architecture for state management and routing"
    },
    {
      "name": "stacked_services",
      "version": "^1.1.0",
      "purpose": "Services for Stacked architecture"
    },
    {
      "name": "gap",
      "version": "^2.0.0",
      "purpose": "Creating gaps in layouts"
    }
  ],
  "sequence_diagram": "@startuml\nactor User\nparticipant main\nparticipant AppView\nparticipant StartupView\nparticipant StartupViewModel\nparticipant HomeView\nparticipant HomeViewModel\nparticipant CalculatorService\nparticipant CalculatorRepository\n\nUser -> main: Launch app\nmain -> AppView: Create and run\nAppView -> StartupView: Initialize\nStartupView -> StartupViewModel: Run startup logic\nStartupViewModel -> CalculatorService: Initialize calculator\nStartupViewModel -> HomeView: Navigate on completion\nHomeView -> HomeViewModel: Initialize\nUser -> HomeView: Select basic calculator\nHomeView -> HomeViewModel: Handle calculator selection\nHomeViewModel -> CalculatorService: Evaluate expression\nCalculatorService -> CalculatorRepository: Evaluate expression\nCalculatorRepository -> CalculatorService: Return result\nHomeViewModel -> HomeView: Update display\nUser -> HomeView: Select scientific calculator\nHomeView -> HomeViewModel: Handle scientific calculator selection\nHomeViewModel -> CalculatorService: Evaluate scientific expression\nCalculatorService -> CalculatorRepository: Evaluate scientific expression\nCalculatorRepository -> CalculatorService: Return scientific result\nHomeViewModel -> HomeView: Update scientific display\nUser -> HomeView: Show info dialog\nHomeView -> HomeViewModel: Handle info dialog request\nHomeViewModel -> DialogService: Show info alert dialog\nDialogService -> InfoAlertDialog: Display dialog\nUser -> HomeView: Show bottom sheet\nHomeView -> HomeViewModel: Handle bottom sheet request\nHomeViewModel -> BottomSheetService: Show notice bottom sheet\nBottomSheetService -> NoticeSheet: Display bottom sheet\n@enduml",
  "state_management_flow": "The application uses the Stacked architecture for state management, with ViewModels (e.g., HomeViewModel, StartupViewModel) handling the business logic and state for their respective views. The app.locator.dart file sets up dependency injection, allowing the ViewModels to access necessary services and repositories. The state is updated in the ViewModels, which then notify the corresponding Views to update the UI accordingly.",
  "navigation_flow": "The application's navigation is managed using the Stacked Router, defined in the app.router.dart file. When the app is launched, the main.dart file sets up the app and runs the AppView, which then initializes the Stacked architecture and shows the StartupView. After completing the startup logic, the StartupViewModel navigates to the HomeView. Within the HomeView, the user can interact with the calculator functionality, and the HomeViewModel handles navigation to the info alert dialog and the notice bottom sheet as needed."
}